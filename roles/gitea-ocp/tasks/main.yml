---
# tasks file for Gitea

# ===============================================================================================
# Add the custom Root CAs
# ===============================================================================================

- name: Check to see if the cluster-wide certificates are set
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Proxy
    name: cluster
  register: r_cluster_proxy_config

- name: Set the name of the cluster root CA bundle
  when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
  set_fact:
    cluster_root_ca: cluster-root-ca-bundle

- name: Set the needed empty ConfigMap for the cluster-wide certificates to {{ _gitea_state }}
  when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
  kubernetes.core.k8s:
    state: "{{ _gitea_state }}"
    api_version: v1
    kind: ConfigMap
    namespace: "{{ _gitea_namespace }}"
    merge_type:
    - strategic-merge
    - merge
    definition:
      metadata:
        name: "{{ cluster_root_ca }}"
        labels:
          config.openshift.io/inject-trusted-cabundle: 'true'
      data: {}

# ===============================================================================================
# Set Proxy Facts
# ===============================================================================================

- name: Set the fact for httpProxy
  when: (r_cluster_proxy_config.resources[0].status.httpProxy is defined) and (r_cluster_proxy_config.resources[0].status.httpProxy != '')
  set_fact:
    http_proxy: "{{ r_cluster_proxy_config.resources[0].status.httpProxy }}"

- name: Set the fact for httpsProxy
  when: (r_cluster_proxy_config.resources[0].status.httpsProxy is defined) and (r_cluster_proxy_config.resources[0].status.httpsProxy != '')
  set_fact:
    https_proxy: "{{ r_cluster_proxy_config.resources[0].status.httpsProxy }}"

- name: Set the fact for noProxy
  when: (r_cluster_proxy_config.resources[0].status.noProxy is defined) and (r_cluster_proxy_config.resources[0].status.noProxy != '')
  set_fact:
    no_proxy: "{{ r_cluster_proxy_config.resources[0].status.noProxy }}"

- name: Set OpenShift Objects for Gitea to {{ _gitea_state }}
  kubernetes.core.k8s:
    state: "{{ _gitea_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - service_account.yaml.j2
  - service.yaml.j2
  - route.yaml.j2
  - persistent_volume_claim.yaml.j2

# Get Gitea Route
- name: Get Gitea Route Hostname
  when: _gitea_state == "present"
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: r_route

- name: Store Gitea Route Hostname
  when: _gitea_state == "present"
  set_fact:
    _gitea_actual_route_url: "{{ 'http' if not _gitea_ssl | default(false) | bool else 'https' }}://{{ r_route.resources[0].status.ingress[0].host }}"
    _gitea_actual_route_hostname: "{{ r_route.resources[0].status.ingress[0].host }}"

- name: Set Route dependant OpenShift Objects for Gitea to {{ _gitea_state }}
  kubernetes.core.k8s:
    state: "{{ _gitea_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - config_map.yaml.j2
  - deployment.yaml.j2

- name: Wait until application is available
  when: _gitea_state == "present"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: r_deployment
  until:
  - r_deployment.resources[0].status.availableReplicas is defined
  - r_deployment.resources[0].status.availableReplicas == 1
  retries: 50
  delay: 10
  ignore_errors: true

- name: Retrieve Gitea resource
  kubernetes.core.k8s_info:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
  register: r_gitea

- name: Save route in custom resource status
  operator_sdk.util.k8s_status:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
    status:
      giteaRoute: "{{ _gitea_actual_route_url }}"
      giteaHostname: "{{ _gitea_actual_route_hostname }}"

- name: Set up admin user
  when:
  - r_gitea.resources[0].status.adminSetupComplete is not defined
  - _gitea_admin_user | default("") | length > 0
  block:
  - name: Retrieve Gitea pod
    kubernetes.core.k8s_info:
      kind: Pod
      namespace: "{{ _gitea_namespace }}"
      label_selectors:
      - app = {{ _gitea_name }}
    register: r_gitea_pod

  - name: Check if Gitea admin user already exists
    uri:
      url: "{{ _gitea_actual_route_url }}/api/v1/users/{{ _gitea_admin_user }}"
      method: GET
      validate_certs: false
      status_code: 200, 404
    register: r_gitea_admin_user
    failed_when: r_gitea_admin_user.status != 200 and r_gitea_admin_user.status != 404

  - name: Set up Gitea admin user
    when: r_gitea_admin_user.status == 404
    block:
    - name: Set Admin password
      when: _gitea_admin_password | default("") | length > 0
      set_fact:
        _gitea_actual_admin_password: "{{ _gitea_admin_password }}"

    - name: Generate Admin password
      when: _gitea_admin_password | default("") | length == 0
      set_fact:
        _gitea_actual_admin_password: >-
          {{ lookup('password', '/dev/null length={{ _gitea_admin_password_length | default( 16 ) }} chars=ascii_letters,digits') }}

    - name: Create Gitea admin user
      kubernetes.core.k8s_exec:
        namespace: "{{ _gitea_namespace }}"
        pod: "{{ r_gitea_pod.resources[0].metadata.name }}"
        command: >-
          /usr/bin/giteacmd admin user create
          --username {{ _gitea_admin_user }}
          --password {{ _gitea_actual_admin_password }}
          --email {{ _gitea_admin_email }}
          --must-change-password=false
          --admin
      register: r_create_admin_user

    - name: Save admin password in custom resource status
      when: r_create_admin_user.return_code == 0
      operator_sdk.util.k8s_status:
        api_version: gpte.opentlc.com/v1
        kind: Gitea
        name: "{{ _gitea_name }}"
        namespace: "{{ _gitea_namespace }}"
        status:
          adminPassword: "{{ _gitea_actual_admin_password }}"
          adminSetupComplete: true

- name: Sanity check to only create users when admin user created
  when:
  - _gitea_create_users | bool
  - _gitea_admin_user | default("") | length == 0
  operator_sdk.util.k8s_status:
    api_version: gpte.opentlc.com/v1
    kind: Gitea
    name: "{{ _gitea_name }}"
    namespace: "{{ _gitea_namespace }}"
    status:
      userSetupError: "Error, can not create users without admin user."
      userSetupComplete: true

- name: Set up users in Gitea (only if admin user has been created also)
  when:
  - _gitea_create_users | bool
  - _gitea_admin_user | default("") | length > 0
  - r_gitea.resources[0].status.userSetupComplete is not defined
  block:
  - name: Set user password
    when: _gitea_user_password | default("") | length > 0
    set_fact:
      _gitea_actual_user_password: "{{ _gitea_user_password }}"

  - name: Generate user password
    when: _gitea_user_password | default("") | length == 0
    set_fact:
      _gitea_actual_user_password: >-
        {{ lookup('password', '/dev/null length={{ _gitea_user_password_length | default( 16 ) }} chars=ascii_letters,digits') }}

  - name: Create the users in Gitea
    include_tasks: create_user.yml
    loop: "{{ range(1, _gitea_user_number | int + 1) | list }}"

  - name: Save user password in custom resource status
    operator_sdk.util.k8s_status:
      api_version: gpte.opentlc.com/v1
      kind: Gitea
      name: "{{ _gitea_name }}"
      namespace: "{{ _gitea_namespace }}"
      status:
        userPassword: "{{ _gitea_actual_user_password }}"
        userSetupComplete: true

  - name: Migrate the repositories for the Gitea users
    when:
    - _gitea_migrate_repositories | bool
    - r_gitea.resources[0].status.repoMigrationComplete is not defined
    block:
    - name: Migrate repositories
      include_tasks: migrate_repos.yml
      loop: >-
        {{
        ( range(1, _gitea_user_number | int + 1) | list )
        | product( _gitea_repositories_list )
        | list
        }}

    - name: Save repo migration status in custom resource status
      operator_sdk.util.k8s_status:
        api_version: gpte.opentlc.com/v1
        kind: Gitea
        name: "{{ _gitea_name }}"
        namespace: "{{ _gitea_namespace }}"
        status:
          repoMigrationComplete: true
